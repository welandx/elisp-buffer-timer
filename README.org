* New usage suggestions
*change the default buffer-log directory*:
"the location to store buffer-timer data.  Will get formated using
format-time-string, so date specifications (like file-%Y-%m-%d) will
work."

#+begin_src elisp
(setq buffer-timer-output-file    (concat (getenv "HOME") "/.log/buffer-timer-%Y-%m-%d")
#+end_src

*buffer-timer-idle-limit* can be modified as needed

** posframe related issue
Limited to issues of the times, special buffer not fully considered by ~buffer-timer-go-idle~, such as posframe. So we can advice it:
#+begin_src elisp
  (advice-add 'buffer-timer-go-idle :before #'posframe-delete-all)
#+end_src
or specify buffer name: (for example, I need to delete acm buffer)
#+begin_src elisp
  (defun weland/delete-posframe (&optional subtracttime)
    (interactive)
    (posframe-delete " *acm-doc-buffer*")
    (posframe-delete " *acm-buffer*"))
  (advice-add 'buffer-timer-go-idle :before #'weland/delete-posframe)
#+end_src

** Minibuffer getting spammed?
Reference: https://emacs.stackexchange.com/questions/14706/suppress-message-in-minibuffer-when-a-buffer-is-saved

#+begin_src elisp
  (defmacro with-suppressed-message (&rest body)
    "Suppress new messages temporarily in the echo area and the `*Messages*' buffer while BODY is evaluated."
    (declare (indent 0))
    (let ((message-log-max nil))
      `(with-temp-message (or (current-message) "") ,@body)))

  (with-suppressed-message (save-buffer))
#+end_src
or advice:
#+begin_src elisp
  (defun suppress-message-advice-around (fun &rest args)
    (let (message-log-max)
      (with-temp-message (or (current-message) "")
        (apply fun args))))
  ;; example: suppress any messages from `save-buffer'
  (advice-add 'save-buffer :around 'suppress-message-advice-around)
  ;; undo:
  (advice-remove 'save-buffer 'suppress-message-advice-around)
#+end_src
* What I have modified
disable native-comp
#+begin_src elisp
;; -*- no-byte-compile: t; -*-
#+end_src
Now you need to explicitly require common lisp lib
#+begin_src elisp
(require 'cl)
#+end_src
use ~cl-parse-integer~ instead of ~string-to-int~

------
Here is the README from the original author

* Overview

buffer-timer is a utility to keep track of the time spent in a series
of emacs buffers.  You can then collectively group buffers into tasks
and thus keep track of your overall time spent per project, for
example.

* Usage

Define your categories in a hierarchical manner:

#+BEGIN_SRC emacs-lisp
(require 'buffer-timer)

; Example list of titles and regexps to group by.  This
(setq buffer-timer-regexp-master-list
  '(
    ("idle" .
     (("generic" .			  "^\\*idle\\*")
      ("generic2" .			  "^\\*idle-2\\*")
      ("minibuf" .                        "^ \\*Minibuf-.*")))
    ("personal" .
     (("reading" .                        "lib/ebooks/")
      ("photography" .                    "images/capturedonearth")))
    ("work" .
      (("rocket engine project" .
        (("docs" .                        "src/rocket.*org")
         ("code" .                        "src/rocket.*\\(cpp\\|h\\)$")
         ("generic" .                     "src/rocket")))
       ("world peace" .
        (("project planning" .            "src/worldpeas/TODO")
         ("implementation" .              "src/worldpeas")))))
     ))

#+END_SRC

And then start editing like you normally would!  At the end of the
day, type /C-c t m/ to get a summary of your time spent matched to the
hierarchy.

* History

Originally written for XEmacs, with a pretty "top (gutter) bar" it has
since migrated to Emacs where it still is missing some of the original
functionality.  The button code and "top bar" functionality needs to
be rewritten entirely.
